"""Add NPC and Settlement models

Revision ID: 0c12d040513f
Revises: 1a31ce608336
Create Date: 2025-03-03 15:03:46.934744

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = '0c12d040513f'
down_revision = '1a31ce608336'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audioasset',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('type', sa.Enum('VOICE', 'MUSIC', 'SOUND_EFFECT', 'AMBIENT', name='audioassettype'), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('duration_seconds', sa.Float(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('settlement',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('settlement_type', sa.Enum('CITY', 'VILLAGE', name='settlementtype'), nullable=False),
    sa.Column('population', sa.Integer(), nullable=False),
    sa.Column('founded_date', sa.DateTime(), nullable=False),
    sa.Column('coordinates_x', sa.Float(), nullable=False),
    sa.Column('coordinates_y', sa.Float(), nullable=False),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('primary_economy', sa.Enum('CROPS', 'LIVESTOCK', 'ORE', 'WINE', 'HERBS', name='economytype'), nullable=False),
    sa.Column('secondary_economy', sa.Enum('CROPS', 'LIVESTOCK', 'ORE', 'WINE', 'HERBS', name='economytype'), nullable=True),
    sa.Column('wealth_rating', sa.Integer(), nullable=False),
    sa.Column('trade_activity', sa.Integer(), nullable=False),
    sa.Column('echo_devotion', sa.Integer(), nullable=False),
    sa.Column('independent_thinking', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('safety_rating', sa.Integer(), nullable=False),
    sa.Column('quality_of_life', sa.Integer(), nullable=False),
    sa.Column('cultural_traits', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('notable_features', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('attributes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_settlement_coordinates', 'settlement', ['coordinates_x', 'coordinates_y'], unique=False)
    op.create_index('idx_settlement_name', 'settlement', ['name'], unique=False)
    op.create_index('idx_settlement_population', 'settlement', ['population'], unique=False)
    op.create_index('idx_settlement_region', 'settlement', ['region'], unique=False)
    op.create_index('idx_settlement_type', 'settlement', ['settlement_type'], unique=False)
    op.create_index(op.f('ix_settlement_name'), 'settlement', ['name'], unique=False)
    op.create_index(op.f('ix_settlement_region'), 'settlement', ['region'], unique=False)
    op.create_table('echodevotionhistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('settlement_id', sa.Uuid(), nullable=False),
    sa.Column('previous_devotion', sa.Integer(), nullable=False),
    sa.Column('new_devotion', sa.Integer(), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['settlement_id'], ['settlement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_echo_devotion_history', 'echodevotionhistory', ['settlement_id', 'change_date'], unique=False)
    op.create_table('gamesession',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', name='gamedifficulty'), nullable=False),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='gamestatus'), nullable=False),
    sa.Column('current_level', sa.Integer(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('npc',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('birth_date', sa.DateTime(), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'NON_BINARY', 'OTHER', name='gender'), nullable=False),
    sa.Column('sexuality', sa.Enum('HETEROSEXUAL', 'HOMOSEXUAL', 'BISEXUAL', 'ASEXUAL', name='sexuality'), nullable=False),
    sa.Column('occupation', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('marital_status', sa.Enum('SINGLE', 'MARRIED', 'DIVORCED', 'WIDOWED', name='maritalstatus'), nullable=False),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=False),
    sa.Column('echo_devotion', sa.Integer(), nullable=False),
    sa.Column('independent_thinking', sa.Integer(), nullable=False),
    sa.Column('health', sa.Integer(), nullable=False),
    sa.Column('happiness', sa.Integer(), nullable=False),
    sa.Column('wealth', sa.Integer(), nullable=False),
    sa.Column('faiss_memory_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_conversation_time', sa.DateTime(), nullable=True),
    sa.Column('attributes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('death_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['settlement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_npc_alive', 'npc', ['is_alive'], unique=False)
    op.create_index('idx_npc_location', 'npc', ['location_id'], unique=False)
    op.create_index('idx_npc_name', 'npc', ['name'], unique=False)
    op.create_index(op.f('ix_npc_name'), 'npc', ['name'], unique=False)
    op.create_table('playerprogress',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('highest_level_reached', sa.Integer(), nullable=False),
    sa.Column('total_score', sa.Integer(), nullable=False),
    sa.Column('achievements_unlocked', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('last_played_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('settlementlocation',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('settlement_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('location_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('coordinates_x', sa.Float(), nullable=True),
    sa.Column('coordinates_y', sa.Float(), nullable=True),
    sa.Column('attributes', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['settlement_id'], ['settlement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_settlement_location_public', 'settlementlocation', ['is_public'], unique=False)
    op.create_index('idx_settlement_location_type', 'settlementlocation', ['location_type'], unique=False)
    op.create_table('settlementrelationship',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('settlement1_id', sa.Uuid(), nullable=False),
    sa.Column('settlement2_id', sa.Uuid(), nullable=False),
    sa.Column('relationship_score', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('last_updated', sa.DateTime(), nullable=False),
    sa.Column('trade_volume', sa.Integer(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['settlement1_id'], ['settlement.id'], ),
    sa.ForeignKeyConstraint(['settlement2_id'], ['settlement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_settlement_relationship_pair', 'settlementrelationship', ['settlement1_id', 'settlement2_id'], unique=False)
    op.create_table('worldevent',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('settlement_id', sa.Uuid(), nullable=True),
    sa.Column('affected_npcs', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('severity', sa.Integer(), nullable=False),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['settlement_id'], ['settlement.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_world_event_active_date', 'worldevent', ['is_active', 'start_date'], unique=False)
    op.create_index('idx_world_event_settlement', 'worldevent', ['settlement_id'], unique=False)
    op.create_table('dailyroutineactivity',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('npc_id', sa.Uuid(), nullable=False),
    sa.Column('activity_type', sa.Enum('WORK', 'SLEEP', 'EAT', 'LEISURE', 'SOCIAL', 'SHOPPING', 'WORSHIP', 'REST', name='activitytype'), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['settlement.id'], ),
    sa.ForeignKeyConstraint(['npc_id'], ['npc.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_routine_activity_type', 'dailyroutineactivity', ['activity_type'], unique=False)
    op.create_index('idx_routine_time', 'dailyroutineactivity', ['start_time', 'end_time'], unique=False)
    op.create_table('gamestate',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('game_session_id', sa.Uuid(), nullable=False),
    sa.Column('saved_at', sa.DateTime(), nullable=False),
    sa.Column('state_data', sa.JSON(), nullable=False),
    sa.Column('checkpoint_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['game_session_id'], ['gamesession.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('npcechodevotionhistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('npc_id', sa.Uuid(), nullable=False),
    sa.Column('previous_devotion', sa.Integer(), nullable=False),
    sa.Column('new_devotion', sa.Integer(), nullable=False),
    sa.Column('change_date', sa.DateTime(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['npc_id'], ['npc.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_npc_echo_devotion_history', 'npcechodevotionhistory', ['npc_id', 'change_date'], unique=False)
    op.create_table('npcpersonality',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('npc_id', sa.Uuid(), nullable=False),
    sa.Column('extraversion', sa.Integer(), nullable=False),
    sa.Column('agreeableness', sa.Integer(), nullable=False),
    sa.Column('conscientiousness', sa.Integer(), nullable=False),
    sa.Column('neuroticism', sa.Integer(), nullable=False),
    sa.Column('openness', sa.Integer(), nullable=False),
    sa.Column('memory_reliability', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['npc_id'], ['npc.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('npcrelationship',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('npc1_id', sa.Uuid(), nullable=False),
    sa.Column('npc2_id', sa.Uuid(), nullable=False),
    sa.Column('relationship_type', sa.Enum('FAMILY', 'FRIEND', 'ROMANTIC', 'PROFESSIONAL', 'ENEMY', name='relationtype'), nullable=False),
    sa.Column('strength', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['npc1_id'], ['npc.id'], ),
    sa.ForeignKeyConstraint(['npc2_id'], ['npc.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_relationship_npc_pair', 'npcrelationship', ['npc1_id', 'npc2_id'], unique=False)
    op.create_table('playernpcrelationship',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('player_id', sa.Uuid(), nullable=False),
    sa.Column('npc_id', sa.Uuid(), nullable=False),
    sa.Column('reputation', sa.Integer(), nullable=False),
    sa.Column('interaction_count', sa.Integer(), nullable=False),
    sa.Column('last_interaction', sa.DateTime(), nullable=True),
    sa.Column('relationship_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['npc_id'], ['npc.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_player_npc_relationship', 'playernpcrelationship', ['player_id', 'npc_id'], unique=False)
    op.create_table('relationshiphistory',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('relationship_id', sa.Uuid(), nullable=False),
    sa.Column('event_date', sa.DateTime(), nullable=False),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['relationship_id'], ['npcrelationship.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_relationship_history_date', 'relationshiphistory', ['event_date'], unique=False)
    op.drop_table('item')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('item',
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='item_owner_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='item_pkey')
    )
    op.drop_index('idx_relationship_history_date', table_name='relationshiphistory')
    op.drop_table('relationshiphistory')
    op.drop_index('idx_player_npc_relationship', table_name='playernpcrelationship')
    op.drop_table('playernpcrelationship')
    op.drop_index('idx_relationship_npc_pair', table_name='npcrelationship')
    op.drop_table('npcrelationship')
    op.drop_table('npcpersonality')
    op.drop_index('idx_npc_echo_devotion_history', table_name='npcechodevotionhistory')
    op.drop_table('npcechodevotionhistory')
    op.drop_table('gamestate')
    op.drop_index('idx_routine_time', table_name='dailyroutineactivity')
    op.drop_index('idx_routine_activity_type', table_name='dailyroutineactivity')
    op.drop_table('dailyroutineactivity')
    op.drop_index('idx_world_event_settlement', table_name='worldevent')
    op.drop_index('idx_world_event_active_date', table_name='worldevent')
    op.drop_table('worldevent')
    op.drop_index('idx_settlement_relationship_pair', table_name='settlementrelationship')
    op.drop_table('settlementrelationship')
    op.drop_index('idx_settlement_location_type', table_name='settlementlocation')
    op.drop_index('idx_settlement_location_public', table_name='settlementlocation')
    op.drop_table('settlementlocation')
    op.drop_table('playerprogress')
    op.drop_index(op.f('ix_npc_name'), table_name='npc')
    op.drop_index('idx_npc_name', table_name='npc')
    op.drop_index('idx_npc_location', table_name='npc')
    op.drop_index('idx_npc_alive', table_name='npc')
    op.drop_table('npc')
    op.drop_table('gamesession')
    op.drop_index('idx_echo_devotion_history', table_name='echodevotionhistory')
    op.drop_table('echodevotionhistory')
    op.drop_index(op.f('ix_settlement_region'), table_name='settlement')
    op.drop_index(op.f('ix_settlement_name'), table_name='settlement')
    op.drop_index('idx_settlement_type', table_name='settlement')
    op.drop_index('idx_settlement_region', table_name='settlement')
    op.drop_index('idx_settlement_population', table_name='settlement')
    op.drop_index('idx_settlement_name', table_name='settlement')
    op.drop_index('idx_settlement_coordinates', table_name='settlement')
    op.drop_table('settlement')
    op.drop_table('audioasset')
    # ### end Alembic commands ###
